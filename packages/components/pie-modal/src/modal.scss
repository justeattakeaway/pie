@use '@justeattakeaway/pie-css/scss' as p;
@use '@justeat/pie-design-tokens/dist/jet.scss' as dt;
@use 'dialog-polyfill/dist/dialog-polyfill.css';

*,
*:before,
*:after {
    box-sizing: border-box;
}

// Spin animation for loading state
@keyframes rotate360 {
    from {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }
}

.c-modal {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    $breakpoint-wide: 768px;

    --modal-size-s: 450px;
    --modal-size-m: 600px;
    --modal-size-l: 1080px;

    // The base modal defaults
    --modal-border-radius: var(--dt-radius-rounded-d);
    --modal-font: var(--dt-font-interactive-m-family);
    --modal-bg-color: var(--dt-color-container-default);
    --modal-elevation: var(--dt-elevation-04);

    &:focus-visible {
        outline: none;
    }

    // We need to override the icon sizes at different screen sizes regardless of size prop passed in
    pie-icon-button {
        @media (max-width: calc($breakpoint-wide - 1px)) {
            --btn-dimension: 40px;
        }
    }


    &[open] {
        // We only apply this when the modal is open,
        // otherwise it interferes with the native
        // `display: none;` on the dialog element.
        display: flex;
        flex-direction: column;
    }

    border-radius: var(--modal-border-radius);
    border: none;
    box-shadow: var(--modal-elevation);
    font-family: var(--modal-font);
    background-color: var(--modal-bg-color);

    padding: 0;

    --modal-margin-none: var(--dt-spacing-none);
    --modal-margin-small: var(--dt-spacing-g);
    --modal-margin-large: var(--dt-spacing-j);
    --modal-margin-block: var(--modal-margin-small);

    @media (min-width: $breakpoint-wide) {
        --modal-margin-block: var(--modal-margin-large);
    }

    // The initial values for these variables apply to the medium-sized modal
    // Other sizes will update the variables as needed
    --modal-block-size: fit-content;
    --modal-inline-size: 75%;
    --modal-max-block-size: calc(100vh - calc(var(--modal-margin-block) * 2));
    --modal-max-inline-size: var(--modal-size-m);

    block-size: var(--modal-block-size);
    inline-size: var(--modal-inline-size);
    max-block-size: var(--modal-max-block-size);
    max-inline-size: var(--modal-max-inline-size);

    &[size='small'] {
        --modal-max-inline-size: var(--modal-size-s);

        @media (min-width: $breakpoint-wide) {
            --modal-margin-block: var(--modal-margin-large);
        }
    }

    &[size='medium'] {
        /* Same as default styles */
        &[isfullwidthbelowmid] {
            @media (max-width: calc($breakpoint-wide - 1px)) {
                --modal-margin-block: var(--modal-margin-none);
                --modal-border-radius: var(--dt-radius-rounded-none);
                --modal-block-size: 100%;
                --modal-inline-size: 100%;

                // In this case, the modal must exceed the previous maximum width
                --modal-max-inline-size: 100%;
            }
        }
    }

    &[size='large'] {
        --modal-inline-size: 75%;
        --modal-max-inline-size: var(--modal-size-l);
        --modal-margin-block: var(--modal-margin-large);

        @media (max-width: calc($breakpoint-wide - 1px)) {
            --modal-margin-block: var(--modal-margin-none);
            --modal-border-radius: var(--dt-radius-rounded-none);
            --modal-block-size: 100%;
            --modal-inline-size: 100%;
        }
    }

    &[position='top'] {
        margin-block-start: var(--dt-spacing-j);
        max-block-size: calc(100% - var(--dt-spacing-j) * 2);

        &[size='large'],
        &[isfullwidthbelowmid][size='medium'] {
            @media (max-width: calc($breakpoint-wide - 1px)) {
                margin-block-start: var(--dt-spacing-none);
                max-block-size: 100%;
            }
        }
    }

    // We need to pull in the token directly here because the
    // pseudo element `::backdrop` doesn't seem to pick up custom css properties.
    &::backdrop {
        background: #{dt.$color-overlay};
    }

    & .c-modal-footer {
        --modal-button-spacing: var(--dt-spacing-d);
        --modal-footer-padding: var(--dt-spacing-d);

        display: flex;
        flex-flow: row-reverse;
        flex-wrap: wrap;
        gap: var(--modal-button-spacing);
        padding: var(--modal-footer-padding);

        @media (min-width: $breakpoint-wide) {
            --modal-footer-padding: var(--dt-spacing-e);
        }
    }

    // When hasStackedActions is set
    // change the direction of the footer flex container so buttons are full width of modal
    &[hasstackedactions] {
        & .c-modal-footer {
            // TODO: Move breakpoint sizes into shared CSS component utilities
            @media (max-width: calc($breakpoint-wide - 1px)) {
                flex-direction: column;
            }
        }
    }

    & .c-modal-header {
        display: grid;
        grid-template-areas: 'back heading close';
        grid-template-columns: minmax(0, max-content) minmax(0, 1fr) minmax(0, max-content);
        align-items: start;
    }

    & .c-modal-heading {
        --modal-header-font-size: calc(var(--dt-font-heading-m-size--narrow) * 1px);
        --modal-header-font-line-height: calc(var(--dt-font-heading-m-line-height--narrow) * 1px);
        --modal-header-font-weight: var(--dt-font-heading-m-weight);

        font-size: var(--modal-header-font-size);
        line-height: var(--modal-header-font-line-height);
        font-weight: var(--modal-header-font-weight);
        margin: 0;
        grid-area: heading;

        margin-inline: var(--dt-spacing-d);
        margin-block: 14px; // This is deliberately not a custom property

        @media (min-width: $breakpoint-wide) {
            --modal-header-font-size: calc(var(--dt-font-heading-m-size--wide) * 1px);
            --modal-header-font-line-height: calc(var(--dt-font-heading-m-line-height--wide) * 1px);
            margin-inline: var(--dt-spacing-e);
            margin-block: 20px; // This is deliberately not a custom property
        }
    }

    // Ensure correct padding when there is a back button in front of the heading
    &[hasbackbutton] .c-modal-heading {
        margin-inline-start: var(--dt-spacing-b);

        @media (min-width: $breakpoint-wide) {
            margin-inline-start: var(--dt-spacing-c);
        }
    }

    // Ensure correct padding when there is a close button behind the heading
    &[isdismissible] .c-modal-heading {
        margin-inline-end: var(--dt-spacing-d);

        @media (min-width: $breakpoint-wide) {
            margin-inline-end: var(--dt-spacing-e);
        }
    }

    & .c-modal-backBtn {
        grid-area: back;
        margin-block: var(--dt-spacing-b);
        margin-inline: var(--dt-spacing-b) var(--dt-spacing-none);

        @media (min-width: $breakpoint-wide) {
            margin-block: var(--dt-spacing-c);
            margin-inline: var(--dt-spacing-c) var(--dt-spacing-none);
        }
    }

    & .c-modal-closeBtn {
        grid-area: close;
        margin-block: var(--dt-spacing-b);
        margin-inline: var(--dt-spacing-none) var(--dt-spacing-b);

        @media (min-width: $breakpoint-wide) {
            margin-block: var(--dt-spacing-c);
            margin-inline: var(--dt-spacing-none) var(--dt-spacing-c);
        }
    }

    & .c-modal-content {
        // Modal content Custom Props
        --modal-content-font-size: calc(var(--dt-font-size-16) * 1px);
        --modal-content-font-weight: var(--dt-font-weight-regular);
        --modal-content-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
        --modal-content-padding-block: var(--dt-spacing-a);
        --modal-content-padding-inline: var(--dt-spacing-d);

        @media (min-width: $breakpoint-wide) {
            --modal-content-padding-inline: var(--dt-spacing-e);
        }

        // Spinner sizes defaults
        --spinner-size: 48px;
        --spinner-border-width: 6px;

        // Spinner colors - currently set for the primary button styles
        --spinner-base-color-h: var(--dt-color-content-interactive-secondary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-secondary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-secondary-l);
        --spinner-left-color-opacity: 0.35;
        --spinner-left-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), var(--spinner-left-color-opacity));
        --spinner-right-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), 1);

        // Spinner animations
        --spinner-animation-duration: 1.15s;
        --spinner-animation-timing-function: linear;
        --spinner-animation-iteration-count: infinite;

        position: relative;
        min-block-size: var(--dt-spacing-j);

        font-size: var(--modal-content-font-size);
        line-height: var(--modal-content-line-height);
        font-weight: var(--modal-content-font-weight);

        padding-inline: var(--modal-content-padding-inline);
        padding-block: var(--modal-content-padding-block);
        flex-grow: 1;

        &--scrollable {
            background:
                // Scroll shadow cover
                // A top-to-bottom opacity gradient from transparent to the component background colour
                linear-gradient(to bottom, transparent, var(--dt-color-container-default) 75%) center bottom,
                // Scroll shadow
                linear-gradient(transparent, var(--dt-color-border-strong)) center bottom;
            background-repeat: no-repeat;
            background-size: 100% 48px, 100% 12px;

            // The shadow cover is an opacity gradient which is attached to the bottom of the scrollable element
            // and scrolls with it, so as you reach the bottom of the content the more opaque portion covers
            // (and therefore hides) the shadow. This gives the effect of the shadow fading away.
            // The shadow itself does not move as you scroll.
            background-attachment: local, scroll;
        }

        &:before {
            content: '';

            // Centre the spinner over the top of the button text
            position: absolute;
            left: 50%;
            top: 50%;
            translate: -50% -50%;

            height: var(--spinner-size);
            width: var(--spinner-size);
            display: block;
            background-color: transparent;
            border-radius: 50%;
            border-color: var(--spinner-left-color) var(--spinner-right-color) var(--spinner-right-color) var(--spinner-left-color);
            border-width: var(--spinner-border-width);
            border-style: solid;
            will-change: transform;
            opacity: 0;
        }
    }

    & > .c-modal-scrollContainer {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow-y: auto;

        // These are the shadows used to indicate scrolling above and below content
        --bg-scroll-end: linear-gradient(rgba(255, 255, 255, 0), var(--dt-color-container-default) 70%) 0 100%;
        --bg-scroll-bottom: radial-gradient(farthest-corner at 50% 100%, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)) 0 100%;

        // Sizes of the scroll shadows
        --bg-size-scroll-end: 100% 40px;
        --bg-size-scroll-bottom: 100% 8px;

        background: var(--bg-scroll-end), var(--bg-scroll-bottom);
        background-repeat: no-repeat;
        background-size: var(--bg-size-scroll-end), var(--bg-size-scroll-bottom);

        background-attachment: local, scroll;

        .c-modal-content {
            flex-shrink: 0;
        }
    }

    &[isfooterpinned] .c-modal-content {
        overflow-y: auto;
    }

    &[isLoading] .c-modal-content {
        &:before {
            animation: rotate360 var(--spinner-animation-duration) var(--spinner-animation-timing-function) var(--spinner-animation-iteration-count);
            opacity: 1;
        }

        & .c-modal-contentInner {
            opacity: 0;
        }
    }

    // removes the scroll shadow effect if "background-attachment" isn't supported.
    // @supports (background-attachment: local) isn't used as Safari 14 recognizes the property but it has no effect.
    // thus, "aspect-ratio" is used instead as it's only supported in Safari>=15
    @supports not (aspect-ratio: 1 / 1) {
        .c-modal-scrollContainer {
            background: none;
        }
    }
}
