@use '@justeat/pie-design-tokens/dist/jet.scss' as dt;

// TODO - add to CSS lib once created
*,
*:before,
*:after {
    box-sizing: border-box;
}

.c-modal {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    $breakpoint-wide: 768px;

    --modal-size-s: 450px;
    --modal-size-m: 600px;
    --modal-size-l: 1080px;

    // The base modal defaults
    --modal-border-radius: var(--dt-radius-rounded-d);
    --modal-font: var(--dt-font-interactive-m-family);
    --modal-bg-color: var(--dt-color-container-default);
    --modal-elevation: var(--dt-elevation-04);

    &:focus-visible {
        outline: none;
    }

    &[open] {
        // We only apply this when the modal is open,
        // otherwise it interferes with the native
        // `display: none;` on the dialog element.
        display: flex;
        flex-direction: column;
    }

    border-radius: var(--modal-border-radius);
    border: none;
    box-shadow: var(--modal-elevation);
    font-family: var(--modal-font);
    background-color: var(--modal-bg-color);

    padding: 0;

    --modal-margin-none: var(--dt-spacing-none);
    --modal-margin-small: var(--dt-spacing-g);
    --modal-margin-large: var(--dt-spacing-j);
    --modal-margin-block: var(--modal-margin-small);

    @media (min-width: $breakpoint-wide) {
        --modal-margin-block: var(--modal-margin-large);
    }

    // The initial values for these variables apply to the medium-sized modal
    // Other sizes will update the variables as needed
    --modal-block-size: fit-content;
    --modal-inline-size: 75%;
    --modal-max-block-size: calc(100vh - calc(var(--modal-margin-block) * 2));
    --modal-max-inline-size: var(--modal-size-m);

    block-size: var(--modal-block-size);
    inline-size: var(--modal-inline-size);
    max-block-size: var(--modal-max-block-size);
    max-inline-size: var(--modal-max-inline-size);

    &[size='small'] {
        --modal-max-inline-size: var(--modal-size-s);

        @media (min-width: $breakpoint-wide) {
            --modal-margin-block: var(--modal-margin-large);
        }
    }

    &[size='medium'] {
        /* Same as default styles */
        &[isfullwidthbelowmid] {
            @media (max-width: calc($breakpoint-wide - 1px)) {
                --modal-margin-block: var(--modal-margin-none);
                --modal-border-radius: var(--dt-radius-rounded-none);
                --modal-block-size: 100%;
                --modal-inline-size: 100%;

                // In this case, the modal must exceed the previous maximum width
                --modal-max-inline-size: 100%;
            }
        }
    }

    &[size='large'] {
        --modal-inline-size: 75%;
        --modal-max-inline-size: var(--modal-size-l);
        --modal-margin-block: var(--modal-margin-large);

        @media (max-width: calc($breakpoint-wide - 1px)) {
            --modal-margin-block: var(--modal-margin-none);
            --modal-border-radius: var(--dt-radius-rounded-none);
            --modal-block-size: 100%;
            --modal-inline-size: 100%;
        }
    }

    // We need to pull in the token directly here because the
    // pseudo element `::backdrop` doesn't seem to pick up custom css properties.
    &::backdrop {
        background: #{dt.$color-overlay};
    }

    & .c-modal-footer {
        --modal-button-spacing: var(--dt-spacing-d);
        --modal-footer-padding: var(--dt-spacing-d);

        display: flex;
        flex-flow: row-reverse;
        flex-wrap: wrap;
        gap: var(--modal-button-spacing);
        padding: var(--modal-footer-padding);

        @media (min-width: $breakpoint-wide) {
            --modal-footer-padding: var(--dt-spacing-e);
        }
    }

    & .c-modal-header {
        --modal-header-padding: var(--dt-spacing-e);

        padding-inline: var(--modal-header-padding);
        padding-block: var(--modal-header-padding);
        align-items: center;
        display: flex;
    }

    &[hasbackbutton] .c-modal-header {
        padding-block: var(--dt-spacing-c);
        padding-inline-start: var(--dt-spacing-c);
    }

    &[isdismissible] .c-modal-header {
        justify-content: space-between;
        padding-block: var(--dt-spacing-c);
        padding-inline-end: var(--dt-spacing-c);
    }

    & .c-modal-heading {
        --modal-header-font-size: calc(var(--dt-font-heading-m-size--wide) * 1px);
        --modal-header-font-line-height: calc(var(--dt-font-heading-m-line-height--wide) * 1px);
        --modal-header-font-weight: var(--dt-font-heading-m-weight);

        font-size: var(--modal-header-font-size);
        line-height: var(--modal-header-font-line-height);
        font-weight: var(--modal-header-font-weight);
        margin: 0;
    }

    // Ensure correct padding when there is a back button in front of the heading
    &[hasbackbutton] .c-modal-heading {
        margin-inline-start: var(--dt-spacing-c);
    }

    // Ensure correct padding when there is a close button behind the heading
    &[isdismissible] .c-modal-heading {
        margin-inline-end: var(--dt-spacing-e);
    }

    & .c-modal-content {
        // Modal content Custom Props
        --modal-content-font-size: calc(var(--dt-font-size-16) * 1px);
        --modal-content-font-weight: var(--dt-font-weight-regular);
        --modal-content-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
        --modal-content-padding: var(--dt-spacing-e);
        --modal-content-padding-block-start: var(--dt-spacing-a);

        font-size: var(--modal-content-font-size);
        line-height: var(--modal-content-line-height);
        font-weight: var(--modal-content-font-weight);

        padding-inline: var(--modal-content-padding);

        overflow-y: auto;

        &--scrollable {
            background:
                // Scroll shadow cover
                // A top-to-bottom opacity gradient from transparent to the component background colour
                linear-gradient(to bottom, transparent, var(--dt-color-container-default) 75%) center bottom,
                // Scroll shadow
                linear-gradient(transparent, var(--dt-color-border-strong)) center bottom;
            background-repeat: no-repeat;
            background-size: 100% 48px, 100% 12px;

            // The shadow cover is an opacity gradient which is attached to the bottom of the scrollable element
            // and scrolls with it, so as you reach the bottom of the content the more opaque portion covers
            // (and therefore hides) the shadow. This gives the effect of the shadow fading away.
            // The shadow itself does not move as you scroll.
            background-attachment: local, scroll;
        }
    }

    & .c-modal-closeBtn {
        margin-inline-start: auto;
    }
}
