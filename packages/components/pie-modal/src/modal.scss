@use '@justeattakeaway/pie-css/scss' as p;
@use '@justeat/pie-design-tokens/dist/jet.scss' as dt;
@use '@justeattakeaway/pie-css/scss/settings' as *;
@use 'dialog-polyfill/dist/dialog-polyfill.css';

.c-modal {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    --modal-size-s: 450px;
    --modal-size-m: 600px;
    --modal-size-l: 1080px;

    // The base modal defaults
    --modal-border-radius: var(--dt-radius-rounded-d);
    --modal-font: var(--dt-font-interactive-l-family);
    --modal-bg-color: var(--dt-color-container-default);
    --modal-elevation: var(--dt-elevation-04);

    &:focus-visible {
        outline: none;
    }

    // We need to override the icon sizes at different screen sizes regardless of size prop passed in
    pie-icon-button {
        @include media('<md') {
            --btn-dimension: 40px;
        }
    }


    &[open] {
        // We only apply this when the modal is open,
        // otherwise it interferes with the native
        // `display: none;` on the dialog element.
        display: flex;
        flex-direction: column;
    }

    position: fixed;
    top: 0;
    border-radius: var(--modal-border-radius);
    border: none;
    box-shadow: var(--modal-elevation);
    font-family: var(--modal-font);
    color: var(--dt-color-content-default);
    background-color: var(--modal-bg-color);

    padding: 0;

    --modal-margin-none: var(--dt-spacing-none);
    --modal-margin-small: var(--dt-spacing-g);
    --modal-margin-large: var(--dt-spacing-j);
    --modal-margin-block: var(--modal-margin-small);

    @include media('>md') {
        --modal-margin-block: var(--modal-margin-large);
    }

    // The initial values for these variables apply to the medium-sized modal
    // Other sizes will update the variables as needed
    --modal-block-size: fit-content;
    --modal-inline-size: 75%;
    --modal-max-block-size: calc(100vh - calc(var(--modal-margin-block) * 2));
    --modal-max-inline-size: var(--modal-size-m);

    block-size: var(--modal-block-size);
    inline-size: var(--modal-inline-size);
    max-block-size: var(--modal-max-block-size);
    max-inline-size: var(--modal-max-inline-size);

    &.c-modal--small {
        --modal-max-inline-size: var(--modal-size-s);

        @include media('>md') {
            --modal-margin-block: var(--modal-margin-large);
        }
    }

    &.c-modal--medium {
        /* Same as default styles */
    }

    &.c-modal--large {
        --modal-inline-size: 75%;
        --modal-max-inline-size: var(--modal-size-l);
        --modal-margin-block: var(--modal-margin-large);
    }

    // Fullscreen styles
    &.c-modal--large,
    &.c-modal--medium.c-modal--fullWidthBelowMid {
        @include media('<md') {
            --modal-margin-block: var(--modal-margin-none);
            --modal-border-radius: var(--dt-radius-rounded-none);
            --modal-block-size: 100%;
            --modal-inline-size: 100%;

            // In order to be fullscreen, the modal may need to exceed
            // the previous maximum width for a medium modal
            --modal-max-inline-size: 100%;

            // this ensures the content container spans the full height
            > .c-modal-scrollContainer {
                block-size: 100%;
            }
        }
    }

    &.c-modal--top {
        margin-block-start: var(--dt-spacing-j);
        max-block-size: calc(100% - var(--dt-spacing-j) * 2);

        &.c-modal--large,
        &.c-modal--fullWidthBelowMid.c-modal--medium {
            @include media('<md') {
                margin-block-start: var(--dt-spacing-none);
                max-block-size: 100%;
            }
        }
    }

    &::backdrop {
        background: var(--dt-color-overlay);
    }

    // TODO: Can be removed along with pie-design-tokens dependency
    // after v17.6 becomes the last we support, currently it is v16+
    // where css vars are not working on ::backdrop
    // Safari >= 16
    @supports (hanging-punctuation: first) and (font: -apple-system-body) and (-webkit-appearance: none) {
        &::backdrop {
            background: #{dt.$color-overlay};
        }
    }

    & .c-modal-footer {
        --modal-button-spacing: var(--dt-spacing-d);
        --modal-footer-padding: var(--dt-spacing-d);

        display: flex;
        flex-flow: row-reverse;
        flex-wrap: wrap;
        gap: var(--modal-button-spacing);
        padding: var(--modal-footer-padding);

        @include media('>md') {
            --modal-footer-padding: var(--dt-spacing-e);
        }

        &.c-modal-footer--stackedActions {
            // TODO: Move breakpoint sizes into shared CSS component utilities
            @include media('<md') {
                flex-direction: column;
            }
        }
    }

    ::slotted([slot="footer"]) {
        display: flex;
        width: 100%;
    }

    & .c-modal-header {
        display: grid;
        grid-template-areas: 'back heading close';
        grid-template-columns: minmax(0, max-content) minmax(0, 1fr) minmax(0, max-content);
        align-items: start;
    }

    & .c-modal-heading {
        --modal-header-font-size: calc(var(--dt-font-heading-m-size--narrow) * 1px);
        --modal-header-font-line-height: calc(var(--dt-font-heading-m-line-height--narrow) * 1px);
        --modal-header-font-weight: var(--dt-font-heading-m-weight);

        font-size: var(--modal-header-font-size);
        line-height: var(--modal-header-font-line-height);
        font-weight: var(--modal-header-font-weight);
        margin: 0;
        grid-area: heading;

        margin-inline-start: var(--dt-spacing-d);
        margin-inline-end: var(--dt-spacing-d);
        margin-block: 14px; // This is deliberately not a custom property

        @include media('>md') {
            --modal-header-font-size: calc(var(--dt-font-heading-m-size--wide) * 1px);
            --modal-header-font-line-height: calc(var(--dt-font-heading-m-line-height--wide) * 1px);
            margin-inline-start: var(--dt-spacing-e);
            margin-inline-end: var(--dt-spacing-e);
            margin-block: 20px; // This is deliberately not a custom property
        }
    }

    // Ensure correct padding when there is a back button in front of the heading
    .c-modal-backBtn + .c-modal-heading {
        margin-inline-start: var(--dt-spacing-b);

        @include media('>md') {
            margin-inline-start: var(--dt-spacing-c);
        }
    }

    &.c-modal--dismissible .c-modal-heading {
        margin-inline-end: var(--dt-spacing-d);

        @include media('>md') {
            margin-inline-end: var(--dt-spacing-e);
        }
    }

    & .c-modal-backBtn {
        grid-area: back;
        margin-block-start: var(--dt-spacing-b);
        margin-block-end: var(--dt-spacing-b);
        margin-inline-start: var(--dt-spacing-b);
        margin-inline-end: var(--dt-spacing-none);

        @include media('>md') {
            margin-block-start: var(--dt-spacing-c);
            margin-block-end: var(--dt-spacing-c);
            margin-inline-start: var(--dt-spacing-c);
            margin-inline-end: var(--dt-spacing-none);
        }
    }

    & .c-modal-closeBtn {
        grid-area: close;
        margin-block-start: var(--dt-spacing-b);
        margin-block-end: var(--dt-spacing-b);
        margin-inline-start: var(--dt-spacing-none);
        margin-inline-end: var(--dt-spacing-b);

        @include media('>md') {
            margin-block-start: var(--dt-spacing-c);
            margin-block-end: var(--dt-spacing-c);
            margin-inline-start: var(--dt-spacing-none);
            margin-inline-end: var(--dt-spacing-c);
        }
    }

    & .c-modal-content {
        // Modal content Custom Props
        --modal-content-font-size: calc(var(--dt-font-size-16) * 1px);
        --modal-content-font-weight: var(--dt-font-weight-regular);
        --modal-content-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
        --modal-content-padding-block: var(--dt-spacing-a);
        --modal-content-padding-inline: var(--dt-spacing-d);
        --modal-content-padding-block-end: var(--dt-spacing-e);
        --modal-content-min-block-size: var(--dt-spacing-j);


        @include media('>md') {
            --modal-content-padding-inline: var(--dt-spacing-e);
        }

        position: relative;
        min-block-size: calc(var(--modal-content-min-block-size) + var(--modal-content-padding-block) + var(--modal-content-padding-block-end)); // The sum of the minimum height and block paddings, when footerActions aren't rendered

        font-size: var(--modal-content-font-size);
        line-height: var(--modal-content-line-height);
        font-weight: var(--modal-content-font-weight);

        padding-inline-start: var(--modal-content-padding-inline);
        padding-inline-end: var(--modal-content-padding-inline);
        padding-block-start: var(--modal-content-padding-block);
        padding-block-end: var(--modal-content-padding-block-end); // We require a larger bottom padding when there's no footer
        flex-grow: 1;

        &:has(+ slot > footer) {
            padding-block-end: var(--modal-content-padding-block);
            min-block-size: var(--modal-content-min-block-size);
        }

        &--scrollable {
            background:
                // Scroll shadow cover
                // A top-to-bottom opacity gradient from transparent to the component background colour
                linear-gradient(to bottom, transparent, var(--dt-color-container-default) 75%) center bottom,
                // Scroll shadow
                linear-gradient(transparent, var(--dt-color-border-strong)) center bottom;
            background-repeat: no-repeat;
            background-size: 100% 48px, 100% 12px;

            // The shadow cover is an opacity gradient which is attached to the bottom of the scrollable element
            // and scrolls with it, so as you reach the bottom of the content the more opaque portion covers
            // (and therefore hides) the shadow. This gives the effect of the shadow fading away.
            // The shadow itself does not move as you scroll.
            background-attachment: local, scroll;
        }
    }

    & > .c-modal-scrollContainer {
        display: flex;
        flex-direction: column;
        overflow-y: auto;

        // These are the shadows used to indicate scrolling above and below content
        --bg-scroll-end: linear-gradient(rgba(255, 255, 255, 0), var(--dt-color-container-default) 70%) 0 100%;
        --bg-scroll-bottom: radial-gradient(farthest-corner at 50% 100%, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)) 0 100%;

        // Sizes of the scroll shadows
        --bg-size-scroll-end: 100% 40px;
        --bg-size-scroll-bottom: 100% 8px;

        background: var(--bg-scroll-end), var(--bg-scroll-bottom);
        background-repeat: no-repeat;
        background-size: var(--bg-size-scroll-end), var(--bg-size-scroll-bottom);

        background-attachment: local, scroll;

        .c-modal-content {
            flex-shrink: 0;
        }
    }

    &.c-modal--pinnedFooter .c-modal-content {
        overflow-y: auto;
    }

    &.c-modal--loading .c-modal-content {
        pie-spinner {
            position: absolute;
            left: 50%;

            // Compensates different block paddings, when footerActions aren't rendered
            top: calc(50% - (var(--modal-content-padding-block-end) - var(--modal-content-padding-block)) / 2);
            transform: translate(-50%, -50%);
        }

        & .c-modal-contentInner {
            display: none;
        }

        // If the footer is rendered, the modal content is not the last child
        &:not(:last-child) {
          pie-spinner {
            top: 50%;
          }
        }
    }

    // removes the scroll shadow effect if "background-attachment" isn't supported.
    // @supports (background-attachment: local) isn't used as Safari 14 recognizes the property but it has no effect.
    // thus, "aspect-ratio" is used instead as it's only supported in Safari>=15
    @supports not (aspect-ratio: 1 / 1) {
        .c-modal-scrollContainer {
            background: none;
        }
    }
}
