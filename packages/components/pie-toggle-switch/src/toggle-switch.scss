@mixin toggle-switch-transition($property) {
    @media (prefers-reduced-motion: no-preference) {
        transition: $property 0.15s cubic-bezier(0.4, 0, 0.9, 1) 0s;
    }
}

*,
*:before,
*:after {
    box-sizing: border-box;
}

.c-toggleSwitch {
    --toggle-switch-bg-color: var(--dt-color-interactive-form);
    --toggle-switch-bg-color--checked: var(--dt-color-interactive-brand);
    --toggle-switch-bg-color--disabled: var(--dt-color-disabled-01);
    --toggle-switch-width: 48px;
    --toggle-switch-height: 24px;
    --toggle-switch-control-size: 20px;
    --toggle-switch-padding: 2px;
    --toggle-switch-radius: var(--dt-radius-rounded-e);
    --toggle-switch-translation: calc(var(--toggle-switch-width) - var(--toggle-switch-control-size) - 2 * var(--toggle-switch-padding));

    display: flex;
    width: var(--toggle-switch-width);
    height: var(--toggle-switch-height);
    flex-shrink: 0;
    padding: var(--toggle-switch-padding);
    border-radius: var(--toggle-switch-radius);
    background-color: var(--toggle-switch-bg-color);

    cursor: pointer;

    @include toggle-switch-transition(background-color);

    &:hover {
        background-color: hsl(var(--dt-color-interactive-form-h), var(--dt-color-interactive-form-s), calc(var(--dt-color-interactive-form-l) - var(--dt-color-hover-01)));
    }

    &:focus,
    &:focus-within {
        background-color: var(--toggle-switch-bg-color);
        box-shadow: 0 0 0 2px var(--dt-color-focus-inner), 0 0 0 4px var(--dt-color-focus-outer);
    }

    &:active {
        background-color: hsl(var(--dt-color-interactive-form-h), var(--dt-color-interactive-form-s), calc(var(--dt-color-interactive-form-l) - var(--dt-color-active-01)));
    }

    &[ischecked] {
        @include toggle-switch-transition(background-color);
        background-color: var(--toggle-switch-bg-color--checked);

        &:hover {
            background-color: hsl(var(--dt-color-interactive-brand-h), var(--dt-color-interactive-brand-s), calc(var(--dt-color-interactive-brand-l) - var(--dt-color-hover-01)));
        }

        &:focus,
        &:focus-within {
            background-color: var(--toggle-switch-bg-color--checked);
        }

        &:active {
            background-color: hsl(var(--dt-color-interactive-brand-h), var(--dt-color-interactive-brand-s), calc(var(--dt-color-interactive-brand-l) - var(--dt-color-active-01)));
        }
    }

    &[isDisabled] {
        background-color: var(--toggle-switch-bg-color--disabled);

        cursor: not-allowed;
        pointer-events: none;
    }
}

.c-toggleSwitch-input {
    appearance: none;
    margin: 0;
}

.c-toggleSwitch-control {
    @include toggle-switch-transition(transform);
    width: var(--toggle-switch-control-size);
    height: var(--toggle-switch-control-size);
    border-radius: var(--toggle-switch-radius);
    background-color: var(--dt-color-interactive-light);
    padding: var(--toggle-switch-padding);

    .c-toggleSwitch-input:checked + & {
        @include toggle-switch-transition(transform);
        transform: translateX(var(--toggle-switch-translation));

        .c-pieIcon--check {
            @include toggle-switch-transition(color);
            color: var(--toggle-switch-bg-color--checked);
        }
    }

    .c-toggleSwitch-input:disabled ~ & {
        color: var(--toggle-switch-bg-color--disabled);

        .c-pieIcon--check {
            @include toggle-switch-transition(color);
            color: var(--toggle-switch-bg-color--disabled);
        }
    }
}

:host([dir='rtl']) {
    .c-toggleSwitch-input:checked + .c-toggleSwitch-control {
        @include toggle-switch-transition(transform);
        transform: translateX(calc(-1 * var(--toggle-switch-translation)));
    }
}
