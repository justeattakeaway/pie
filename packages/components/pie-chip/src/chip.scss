@use '@justeattakeaway/pie-css/scss' as p;

:host {
    display: inline-block;
}

:host([disabled]),
:host([isLoading]) {
    pointer-events: none;
}

.c-chip {
    --int-states-mixin-bg-color: var(--dt-color-interactive-secondary);
    --chip-color: var(--dt-color-content-interactive-secondary);
    --chip-border-width: 1px;
    --chip-border-color: transparent;
    --chip-padding-block: calc(6px - var(--chip-border-width));
    --chip-padding-inline: calc(var(--dt-spacing-c) - var(--chip-border-width));
    --chip-padding-dismissible: calc(var(--dt-spacing-a) - var(--chip-border-width));
    --chip-min-width: calc(var(--dt-spacing-g) + var(--dt-spacing-b));
    --chip-gap: var(--dt-spacing-b);
    --chip-dismissible-offset: calc(var(--chip-gap) / -2); // ensures the spacing between the text and close icon is 4px
    --chip-cursor: pointer;
    --chip-close-btn-cursor: pointer;

    // Pie Webc Icon var that is used to ensure the correctly sized icon passed in a slot
    --icon-display-override: block;

    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--chip-gap);
    padding-block-start: var(--chip-padding-block);
    padding-block-end: var(--chip-padding-block);
    padding-inline-start: var(--chip-padding-inline);
    padding-inline-end: var(--chip-padding-inline);
    background-color: var(--int-states-mixin-bg-color);
    color: var(--chip-color);
    border-radius: var(--dt-radius-rounded-e);
    border: 1px solid;
    border-color: var(--chip-border-color);
    cursor: var(--chip-cursor);
    user-select: none;
    min-width: var(--chip-min-width);

    font-family: inherit;
    @include p.font-size(--dt-font-interactive-xs-size);
    @include p.line-height(--dt-font-interactive-xs-line-height);
    font-weight: var(--dt-font-weight-bold);

    @include p.interactive-states('--dt-color-interactive-secondary');

    &.c-chip--default {
        // same as default styles
    }

    &.c-chip--outline:not(.is-disabled, .c-chip--selected) {
        --chip-border-color: var(--dt-color-border-strong);
    }

    &.c-chip--outline,
    &.c-chip--ghost {
        --int-states-mixin-bg-color: transparent;
        --chip-color: var(--dt-color-content-interactive-secondary-solid);

        @include p.interactive-states('--dt-color-transparent', 'transparent');
    }

    &.c-chip--selected {
        --int-states-mixin-bg-color: var(--dt-color-interactive-primary);
        --chip-color: var(--dt-color-content-interactive-primary);

        @include p.interactive-states('--dt-color-interactive-primary', 'inverse', '02');
    }

    &.is-loading {
        & > *:not(.c-chip-spinner) {
            visibility: hidden;
        }

        .c-chip-spinner {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
    }

    &.is-disabled {
        --int-states-mixin-bg-color: var(--dt-color-disabled-01);
        --chip-color: var(--dt-color-content-disabled);
        --chip-cursor: not-allowed;
        --chip-close-btn-cursor: not-allowed;

        &.c-chip--ghost {
            --int-states-mixin-bg-color: transparent;
            --chip-color: var(--dt-color-content-disabled-solid);
        }
    }

    &.is-dismissible {
        --chip-cursor: text;
        padding-inline-end: var(--chip-padding-dismissible);
        padding-block-start: var(--chip-padding-dismissible);
        padding-block-end: var(--chip-padding-dismissible);
        user-select: auto;

        .c-chip-closeBtn {
            display: inline-flex;
            user-select: none;
            outline: none;
            border: none;
            color: inherit;
            background-color: inherit;
            border-radius: inherit;
            cursor: var(--chip-close-btn-cursor);
            padding: 0;
            margin-inline-start: var(--chip-dismissible-offset);

            &:focus-visible {
                @include p.focus;
            }
        }
    }

    &:focus-visible {
        @include p.focus;
    }
}

[type="checkbox"] {
    // the p.visually-hidden mixin doesn't properly work on checkboxes
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    border: 0;

    overflow: hidden;
    white-space: nowrap;

    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);

    &:focus-visible {
        outline: none;
    }
}

[type="checkbox"]:focus-visible + .c-chip {
    @include p.focus;
}

::slotted(svg) {
    display: block;
    height: var(--icon-size-override);
    width: var(--icon-size-override);
}
