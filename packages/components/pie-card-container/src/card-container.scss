@use '@justeattakeaway/pie-css/scss' as p;

@mixin card-interactive-states($bg-color) {
    &:hover:not([disabled]) {
        --hover-modifier: calc(-1 * var(--dt-color-hover-01));
        --card-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) + var(--hover-modifier)));
    }

    &:active:not([disabled]) {
        --active-modifier: calc(-1 * var(--dt-color-active-01));
        --card-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) + var(--active-modifier)));
    }
}

// By default, the card is styled to the 'Default' variant designs
.c-card-container {
    --card-bg-color: var(--dt-color-container-default);
    --card-radius: var(--dt-radius-rounded-c);
    --card-shadow: var(--dt-elevation-01);

    display: block;
    color: currentcolor;
    background-color: var(--card-bg-color);
    border-radius: var(--card-radius);
    text-decoration: none;
    position: relative;

    @include card-interactive-states('--dt-color-container-default');

    &[disabled] {
        --card-bg-color: var(--dt-color-disabled-01);
        pointer-events: none;
    }

    // We should not apply the default elevation styling if the card is focused
    // but we want to make sure that it is still applied when the card is clicked
    &:not(:focus-within),
    &:active:focus-within {
        box-shadow: var(--card-shadow);
    }

    // We want to stretch the <a> tag over the entire card to make the entire component interactive
    > a {
        cursor: pointer;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
    }

    > a:focus {
        outline: none;
    }

    > a:focus-visible {
        /*
        TODO: This focus styling should be extracted out into a shared mixin to share among other components
        Applying both shadows in a single declaration gives anti-aliasing artefacts.
        box-shadow: 0 0 0 2px dt.$color-focus-inner, 0 0 0 4px dt.$color-focus-outer;

        To prevent this, they should be separated so they don't bleed into each other,
        i.e., one shadow on the element and another on a pseudo element like :after
        */
        box-shadow: 0 0 0 2px var(--dt-color-focus-inner);
        outline: none;

        &:after {
            content: '';
            display: block;

            /*
            The pseudo element has to be larger than the element itself, but not just by
            2px (the thickness of the inner shadow), it has to be 1px larger than that to
            account for the border thickness.
            */
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            border-radius: var(--card-radius);

            box-shadow: 0 0 0 2px var(--dt-color-focus-outer);
        }
    }
}

.c-card-container-slot {
    // Ensures that any slot containers are also rounded
    border-radius: inherit;
    overflow: hidden;
}
