@use '@justeattakeaway/pie-css/scss' as p;

:host {
    display: block;
}

@mixin radio-interactive-state($bg-color) {
    .c-radio-input {
        &:hover:not(:checked, :disabled) {
            --radio-bg-color: hsl(var(--dt-color-black-h), var(--dt-color-black-s), var(--dt-color-black-l), var(--dt-color-hover-01));

            @supports (background-color: color-mix(in srgb, black, white)) {
                --radio-bg-color: color-mix(in srgb, var(--dt-color-hover-01-bg) var(--dt-color-hover-01),  transparent);
            }
        }

        &:active:not(:checked, :disabled) {
            --radio-bg-color: hsl(var(--dt-color-black-h), var(--dt-color-black-s), var(--dt-color-black-l), var(--dt-color-active-01));

            @supports (background-color: color-mix(in srgb, black, white)) {
                --radio-bg-color: color-mix(in srgb, var(--dt-color-active-01-bg) var(--dt-color-active-01),  transparent);
            }
        }

        &:hover:checked:not(:disabled) {
            &:before {
                --radio-bg-color--checked: hsl(var(--#{$bg-color}-h), var(--#{$bg-color}-s), calc(var(--#{$bg-color}-l) - var(--dt-color-hover-01)));
                --radio-border-color: hsl(var(--#{$bg-color}-h), var(--#{$bg-color}-s), calc(var(--#{$bg-color}-l) - var(--dt-color-hover-01)));

                @supports (background-color: color-mix(in srgb, black, white)) {
                    --radio-bg-color--checked: color-mix(in srgb, var(--dt-color-hover-01-bg) var(--dt-color-hover-01),  var(#{$bg-color}));
                }
            }
        }

        &:active:checked:not(:disabled) {
            &:before {
                --radio-bg-color--checked: hsl(var(--#{$bg-color}-h), var(--#{$bg-color}-s), calc(var(--#{$bg-color}-l) - var(--dt-color-active-01)));
                --radio-border-color: hsl(var(--#{$bg-color}-h), var(--#{$bg-color}-s), calc(var(--#{$bg-color}-l) - var(--dt-color-active-01)));

                @supports (background-color: color-mix(in srgb, black, white)) {
                    --radio-bg-color--checked: color-mix(in srgb, var(--dt-color-active-01-bg) var(--dt-color-active-01),  var(#{$bg-color}));
                }
            }
        }
    }
}

.c-radio {
    --radio-dot-bg-color: var(--dt-color-content-interactive-primary);
    --radio-bg-color: transparent;
    --radio-bg-color--checked: var(--dt-color-interactive-brand);
    --radio-border-color: var(--dt-color-border-form);
    --radio-font-size: #{p.font-size(--dt-font-body-l-size)};
    --radio-line-height: #{p.font-size(--dt-font-body-l-line-height)};
    --radio-font-weight: var(--dt-font-weight-regular);
    --radio-text-color: var(--dt-color-content-default);
    --radio-size: 24px;
    --radio-dot-size: 8px;
    --radio-cursor: pointer;
    --radio-motion-easing: var(--dt-motion-easing-persistent-functional);
    --radio-border-width: 1px;

    display: flex;
    align-items: center;
    gap: var(--dt-spacing-b);
    cursor: var(--radio-cursor);
    font-size: var(--radio-font-size);
    line-height: var(--radio-line-height);
    font-weight: var(--radio-font-weight);
    color: var(--radio-text-color);

    @include radio-interactive-state('dt-color-interactive-brand');

    &.is-disabled {
        --radio-cursor: not-allowed;
    }

    &.c-radio--status-error {
        --radio-bg-color--checked: var(--dt-color-support-error);
        --radio-border-color: var(--dt-color-support-error);

        @include radio-interactive-state('dt-color-support-error');
    }

    .c-radio-input {
        align-self: flex-start;
        appearance: none;
        display: block;
        position: relative;
        inline-size: var(--radio-size);
        block-size: var(--radio-size);
        border: var(--radio-border-width) solid var(--radio-border-color);
        border-radius: 50%;
        margin: 0;
        cursor: var(--radio-cursor);
        background-color: var(--radio-bg-color);
        flex-shrink: 0;

        // The filled circle before checking the radio
        &:before {
            --circle-size: calc(var(--radio-border-width) * -1);

            content: '';
            display: block;
            inset: var(--circle-size);
            border-radius: inherit;
            background-color: var(--radio-bg-color--checked);
            position: absolute;
            transform: scale(0);
        }

        // The dot in the middle before checking the radio
        &:after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: var(--radio-dot-size);
            height: var(--radio-dot-size);
            background-color: var(--radio-dot-bg-color);
            border-radius: 50%;
            transform: translate(-50%, -50%) scale(0);
        }

        &:checked {
            // The dot in the middle after checking the radio
            &:after {
                transform: translate(-50%, -50%) scale(1);
            }

            // The filled circle after checking the radio
            &:before {
                transform: scale(1);
            }
        }

        &:disabled {
            --radio-bg-color: var(--dt-color-disabled-01);
            --radio-border-color: var(--dt-color-border-default);
        }

        &:checked:disabled {
            --radio-dot-bg-color: var(--dt-color-content-disabled);
            --radio-bg-color--checked: var(--dt-color-disabled-01);
        }
    }
}

.c-radio--allow-animation {
    /* stylelint-disable-next-line no-descending-specificity */
    .c-radio-input {
        transition: background-color var(--dt-motion-timing-100) var(--radio-motion-easing);

        &:not(:disabled):before {
            @media (prefers-reduced-motion: no-preference) {
                transition: all var(--dt-motion-timing-100) var(--radio-motion-easing);
            }
        }

        // Scales down at 100ms when unchecked
        &:not(:disabled):after {
            @media (prefers-reduced-motion: no-preference) {
                transition: all var(--dt-motion-timing-100) var(--radio-motion-easing);
            }
        }

        // Scales up at 150ms when checked
        &:not(:disabled):checked:after {
            @media (prefers-reduced-motion: no-preference) {
                transition: all var(--dt-motion-timing-150) var(--radio-motion-easing);
            }
        }
    }
}

:host(:focus-visible) {
    outline: none;

    .c-radio .c-radio-input {
        @include p.focus;
    }
}
