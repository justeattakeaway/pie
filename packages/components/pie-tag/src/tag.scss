@use '@justeattakeaway/pie-css/scss' as p;

:host {
    display: inline-flex;
}

// Base tag styles
.c-tag {
    // Default variant is neutral, subtle
    --tag-bg-color: var(--dt-color-container-strong);
    --tag-icon-bg-color: var(--dt-color-container-inverse);
    --tag-icon-color: var(--dt-color-content-inverse);
    --tag-color: var(--dt-color-content-default);
    --tag-border-radius: var(--dt-radius-rounded-b);

    // transparent to variable to function properly in component tests
    --tag-transparent-bg-color: transparent;

    // Pie Webc Icon var that is used to ensure the correctly sized icon passed in a slot
    --icon-display-override: block;

    display: inline-flex;
    flex-direction: row;
    gap: var(--tag-gap);
    align-items: center;
    justify-content: center;
    border-radius: var(--tag-radius);

    background-color: var(--tag-bg-color);
    color: var(--tag-color);
    font-family: var(--tag-font-family);
    font-weight: var(--tag-font-weight);
    font-size: var(--tag-font-size);
    line-height: var(--tag-line-height);

    &.c-tag--icon-only {
        --tag-icon-bg-color: none;
    }

    // Variants
    &.c-tag--neutral {
        &.c-tag--strong {
            --tag-bg-color: var(--dt-color-container-inverse);
            --tag-icon-bg-color: var(--dt-color-container-strong);
            --tag-icon-color: var(--dt-color-content-default);
            --tag-color: var(--dt-color-content-inverse);
        }
    }

    &.c-tag--neutral-alternative {
        --tag-bg-color: var(--dt-color-container-default);
        --tag-icon-bg-color: var(--dt-color-container-strong);
        --tag-icon-color: var(--dt-color-content-default);
        --tag-color: var(--dt-color-content-default);
    }

    &.c-tag--translucent {
    }

    &.c-tag--information {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--success {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--error {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--warning {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--brand-02 {
    }

    &.c-tag--brand-03 {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--brand-04 {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--brand-05 {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--brand-06 {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--brand-08 {
        &.c-tag--strong {
            // Strong variant styles
        }
    }

    &.c-tag--outline {
        --tag-bg-color: var(--tag-transparent-bg-color);
        --tag-color: var(--dt-color-content-default-solid);

        // the outline in design specs is part of the total component
        // height calculation, thus, we use box-shadow to mimic borders
        // and avoid the extra 2px from "border: 1px solid" as shadows are applied "internally"
        box-shadow: 0 0 0 1px var(--dt-color-border-strong);
    }

    &.c-tag--ghost {
        --tag-bg-color: var(--tag-transparent-bg-color);
        --tag-color: var(--dt-color-content-default-solid);
    }

    // Dimmed
    &.is-dimmed {
        opacity: 0.5;
    }
}

.c-tag.c-tag--large {
    --tag-font-family: var(--dt-font-body-s-family);
    --tag-font-weight: var(--dt-font-body-s-weight);
    --tag-font-size: #{p.font-size(--dt-font-body-s-size)};
    --tag-line-height: #{p.line-height(--dt-font-body-s-line-height)};
    --tag-radius: var(--dt-radius-rounded-e);
    --icon-size-override: 16px;

    &.c-tag--has-icon:not(.c-tag--icon-only) {
        --tag-gap: var(--dt-spacing-a);
        --tag-icon-container-size: 22px;

        padding-block: 1px;
        padding-inline-start: 1px;
        padding-inline-end: var(--dt-spacing-b);
    }

    &:not(.c-tag--has-icon) {
        padding-inline: var(--dt-spacing-b);
        padding-block: var(--dt-spacing-a-small);
    }

    &.c-tag--icon-only {
        padding-inline: var(--dt-spacing-b);
        padding-block: var(--dt-spacing-a);
    }
}

.c-tag.c-tag--small {
    --tag-font-family: var(--dt-font-caption-family);
    --tag-font-weight: var(--dt-font-caption-weight);
    --tag-font-size: #{p.font-size(--dt-font-caption-size)};
    --tag-line-height: #{p.line-height(--dt-font-caption-line-height)};
    --tag-radius: var(--dt-radius-rounded-c);
    --icon-size-override: 12px;

    &.c-tag--has-icon:not(.c-tag--icon-only) {
        --tag-gap: var(--dt-spacing-a-small);
        --tag-icon-container-size: 16px;

        padding-block: 1px;
        padding-inline-start: 1px;
        padding-inline-end: var(--dt-spacing-a);
    }

    &:not(.c-tag--has-icon) {
        padding-inline: var(--dt-spacing-a);
        padding-block: var(--dt-spacing-a-small);
    }

    &.c-tag--icon-only {
        padding-inline: var(--dt-spacing-a);
        padding-block: 1px;
    }
}

.c-tag--has-icon:not(.c-tag--icon-only) {
    slot[name="icon"] {
        height: var(--tag-icon-container-size);
        background-color: var(--tag-icon-bg-color);
        display: flex;
        align-items: center;
        justify-content: center;
        aspect-ratio: 1;
        border-radius: inherit;
    }
}

// Icon container
slot[name="icon"] {
    color: var(--tag-icon-color);
}

// Used to size an SVG if one is passed in (when not using the component icons)
::slotted(svg) {
    display: block;
    height: var(--icon-size-override);
    width: var(--icon-size-override);
}
