@use '@justeattakeaway/pie-css/scss' as p;


// Base tag styles
.c-tag {
    --int-states-mixin-bg-color: var(--dt-color-container-strong);
    --tag-color: var(--dt-color-content-default);
    --tag-border-radius: var(--dt-radius-rounded-b);
    --tag-padding-block: 2px;
    --tag-padding-inline: var(--dt-spacing-b);
    --tag-font-family: var(--dt-font-body-s-family);
    --tag-font-weight: var(--dt-font-body-s-weight);
    --tag-font-size: #{p.font-size(--dt-font-body-s-size)};
    --tag-line-height: #{p.line-height(--dt-font-body-s-line-height)};
    --tag-cursor: text;

    // transparent to variable to function properly in component tests
    --tag-transparent-bg-color: transparent;

    // Pie Webc Icon var that is used to ensure the correctly sized icon passed in a slot
    --icon-display-override: block;
    --icon-size-override: 16px;

    display: inline-flex;
    flex-direction: row;
    vertical-align: middle;
    align-items: center;
    justify-content: center;
    gap: var(--dt-spacing-a);
    padding: var(--tag-padding-block) var(--tag-padding-inline);
    border-radius: var(--tag-border-radius);
    background-color: var(--int-states-mixin-bg-color);
    color: var(--tag-color);
    font-family: var(--tag-font-family);
    font-weight: var(--tag-font-weight);
    font-size: var(--tag-font-size);
    line-height: var(--tag-line-height);
    cursor: var(--tag-cursor);

    &.c-tag--interactive {
        --tag-cursor: pointer;

        border: none;
        user-select: none;

        &:focus-visible {
            @include p.focus;
        }
    }

    &.c-tag--icon-placement--leading {
        // same as default styles
    }

    &.c-tag--icon-placement--trailing {
        flex-direction: row-reverse;
    }

    // Size
    &.c-tag--small {
        --tag-padding-block: 0;
        --tag-padding-inline: var(--dt-spacing-a);
        --tag-border-radius: var(--dt-radius-rounded-a);
        --tag-font-size: #{p.font-size(--dt-font-caption-size)};
        --tag-line-height: #{p.line-height(--dt-font-caption-line-height)};
    }

    &.c-tag--large {
        // same as default styles
    }

    &.c-tag--icon-only {
        --tag-padding-block: var(--dt-spacing-a);
    }

    // Variant
    &.c-tag--neutral {
        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-container-strong');
        }

        &.c-tag--strong {
            --int-states-mixin-bg-color: var(--dt-color-container-inverse);
            --tag-color: var(--dt-color-content-inverse);

            &.c-tag--interactive {
                @include p.interactive-states('--dt-color-container-inverse', 'inverse', '02');
            }
        }
    }

    &.c-tag--information {
        --int-states-mixin-bg-color: var(--dt-color-support-info-02);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-info-02');
        }

        &.c-tag--strong {
            --int-states-mixin-bg-color: var(--dt-color-support-info);
            --tag-color: var(--dt-color-content-inverse);

            &.c-tag--interactive {
                @include p.interactive-states('--dt-color-support-info');
            }
        }
    }

    &.c-tag--success {
        --int-states-mixin-bg-color: var(--dt-color-support-positive-02);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-positive-02');
        }

        &.c-tag--strong {
            --int-states-mixin-bg-color: var(--dt-color-support-positive);
            --tag-color: var(--dt-color-content-inverse);

            &.c-tag--interactive {
                @include p.interactive-states('--dt-color-support-positive');
            }
        }
    }

    &.c-tag--error {
        --int-states-mixin-bg-color: var(--dt-color-support-error-02);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-error-02');
        }

        &.c-tag--strong {
            --int-states-mixin-bg-color: var(--dt-color-support-error);
            --tag-color: var(--dt-color-content-light);

            &.c-tag--interactive {
                @include p.interactive-states('--dt-color-support-error');
            }
        }
    }

    &.c-tag--brand-02 {
        --int-states-mixin-bg-color: var(--dt-color-support-brand-02);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-brand-02');
        }
    }

    &.c-tag--brand-03 {
        --int-states-mixin-bg-color: var(--dt-color-support-brand-03);
        --tag-color: var(--dt-color-content-dark);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-brand-03');
        }
    }

    &.c-tag--brand-04 {
        --int-states-mixin-bg-color: var(--dt-color-support-brand-04);
        --tag-color: var(--dt-color-content-dark);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-brand-04');
        }
    }

    &.c-tag--brand-05 {
        --int-states-mixin-bg-color: var(--dt-color-support-warning-02);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-warning-02');
        }

        &.c-tag--strong {
            --int-states-mixin-bg-color: var(--dt-color-support-warning);
            --tag-color: var(--dt-color-content-dark);

            &.c-tag--interactive {
                @include p.interactive-states('--dt-color-support-warning');
            }
        }
    }

    &.c-tag--brand-06 {
        --int-states-mixin-bg-color: var(--dt-color-support-brand-06);
        --tag-color: var(--dt-color-content-light);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-support-brand-06', 'inverse', '02-light');
        }
    }

    &.c-tag--neutral-alternative {
        --int-states-mixin-bg-color: var(--dt-color-container-default);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--dt-color-container-default');
        }
    }

    &.c-tag--outline {
        --int-states-mixin-bg-color: var(--tag-transparent-bg-color);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--tag-transparent-bg-color', 'transparent');
        }

        // the outline in design specs is part of the total component
        // height calculation, thus, we use box-shadow to mimic borders
        // and avoid the extra 2px from "border: 1px solid" as shadows are applied "internally"
        box-shadow: 0 0 0 1px var(--dt-color-border-strong);
    }

    &.c-tag--ghost {
        --int-states-mixin-bg-color: var(--tag-transparent-bg-color);
        --tag-color: var(--dt-color-content-default);

        &.c-tag--interactive {
            @include p.interactive-states('--tag-transparent-bg-color', 'transparent');
        }
    }

    &.is-disabled {
        opacity: 0.5;
    }

    &[disabled] {
        --tag-cursor: not-allowed;
    }
}

// Used to size an SVG if one is passed in (when not using the component icons)
::slotted(svg) {
    display: block;
    height: var(--icon-size-override);
    width: var(--icon-size-override);
}
