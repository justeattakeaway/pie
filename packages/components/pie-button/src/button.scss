@use '@justeattakeaway/pie-css/scss' as p;
@use '@justeattakeaway/pie-css/scss/settings' as *;

/**
* Mixin for adding the responsive behaviour.
* Takes in the the particular settings for the wide breakpoint.
*/
@mixin responsive-wide {
    &.o-btn--responsive {
        @include media('>md') {
            @content;
        }
    }
}

// Base button styles
.o-btn {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    --btn-border-radius: var(--dt-radius-rounded-e);
    --btn-font-family: var(--dt-font-interactive-l-family);
    --btn-font-weight: var(--dt-font-interactive-l-weight);

    // The following values set to default background and color
    // currently this sets the primary button styles
    --int-states-mixin-bg-color: var(--dt-color-interactive-brand);
    --btn-text-color: var(--dt-color-content-interactive-light);
    --icon-display-override: block;

    // Vertical and horizontal padding values for the button
    --btn-padding-vertical-xsmall: 6px;
    --btn-padding-vertical-small: 8px;
    --btn-padding-vertical-medium: 10px;
    --btn-padding-vertical-large: 14px;
    --btn-padding-horizontal-small: var(--dt-spacing-b);
    --btn-padding-horizontal-medium: var(--dt-spacing-d);
    --btn-padding-horizontal-large: var(--dt-spacing-e);

    /**
    * Mixin for updating the button styles based on the size passed in.
    * Takes in the name of the size to be used.
    */
    @mixin button-size($size) {
        @if $size == 'xsmall' {
            --btn-font-size: #{p.font-size(--dt-font-size-14)};
            --btn-line-height: calc(var(--dt-font-size-14-line-height) * 1px);
            --icon-size-override: 16px;
        } @else if $size == 'small-expressive' {
            --btn-font-size: #{p.font-size(--dt-font-size-20)};
            --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
            --icon-size-override: 20px;
        } @else if $size == 'small-productive' {
            --btn-font-size: #{p.font-size(--dt-font-size-16)};
            --btn-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
            --icon-size-override: 20px;
        } @else if $size == 'medium' {
            --btn-font-size: #{p.font-size(--dt-font-size-20)};
            --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
            --icon-size-override: 24px;
        } @else if $size == 'large' {
            --btn-font-size: #{p.font-size(--dt-font-size-20)};
            --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
            --icon-size-override: 24px;
        }
    }

    /**
    * Mixin for applying the button padding based on the size passed in.
    * $size: The name of the size to be used.
    * $offsetPaddingForBorder: A boolean to specify whether the padding should be offset for a border
    */
    @mixin button-padding($size, $offsetPaddingForBorder: false) {
        $verticalPadding: '';
        $horizontalPadding: '';

        @if $size == 'xsmall' {
            $verticalPadding: '--btn-padding-vertical-xsmall';
            $horizontalPadding: '--btn-padding-horizontal-small';
        } @else if $size == 'small-expressive' {
            $verticalPadding: '--btn-padding-vertical-xsmall';
            $horizontalPadding: '--btn-padding-horizontal-medium';
        } @else if $size == 'small-productive' {
            $verticalPadding: '--btn-padding-vertical-small';
            $horizontalPadding: '--btn-padding-horizontal-medium';
        } @else if $size == 'medium' {
            $verticalPadding: '--btn-padding-vertical-medium';
            $horizontalPadding: '--btn-padding-horizontal-large';
        } @else if $size == 'large' {
            $verticalPadding: '--btn-padding-vertical-large';
            $horizontalPadding: '--btn-padding-horizontal-large';
        }

        @if $offsetPaddingForBorder {
            padding: calc(var(#{$verticalPadding}) - 1px) var(#{$horizontalPadding});
        } @else {
            padding: var(#{$verticalPadding}) var(#{$horizontalPadding});
        }
    }

    position: relative;
    display: inline-flex;
    gap: var(--dt-spacing-b);
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: var(--btn-border-radius);
    outline: none;
    background-color: var(--int-states-mixin-bg-color);
    font-family: var(--btn-font-family);
    font-size: var(--btn-font-size);
    font-weight: var(--btn-font-weight);
    color: var(--btn-text-color);
    line-height: var(--btn-line-height);
    cursor: pointer;
    user-select: none;
    text-decoration: none;

    // used to specify whether the button should be full width or not
    inline-size: var(--btn-inline-size);

    // ************************
    // Button Variant Modifiers
    // ************************
    &.o-btn--primary {
        @include p.interactive-states('--dt-color-interactive-brand');

        &.o-btn--xsmall,
        &.o-btn--small-productive {
            /**
            * Where the font-size is smaller,
            * update the button backgrounds so that the text is accessible
            **/
            --int-states-mixin-bg-color: var(--dt-color-interactive-primary);
            --btn-text-color: var(--dt-color-content-interactive-primary);

            @include p.interactive-states('--dt-color-interactive-primary', 'inverse', '02');
        }

        // This is to handle the background colour change getting overridden above, but then being put in responsive mode
        // can't use :not for this unfortunately, as then the smaller narrow state would lose its background colour too
        &.o-btn--xsmall.o-btn--expressive,
        &.o-btn--small-productive {
            @include responsive-wide {
                --int-states-mixin-bg-color: var(--dt-color-interactive-brand);

                @include p.interactive-states('--dt-color-interactive-brand');
            }
        }
    }

    &.o-btn--primary-alternative {
        --int-states-mixin-bg-color: var(--dt-color-interactive-primary);
        --btn-text-color: var(--dt-color-content-interactive-primary);

        @include p.interactive-states('--dt-color-interactive-primary', 'inverse', '02');
    }

    &.o-btn--secondary {
        --int-states-mixin-bg-color: var(--dt-color-interactive-secondary);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        @include p.interactive-states('--dt-color-interactive-secondary');
    }

    &.o-btn--outline {
        --int-states-mixin-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        border: 1px solid var(--dt-color-border-strong);

        @include p.interactive-states('--dt-color-transparent', 'transparent', '01');
    }

    &.o-btn--ghost {
        --int-states-mixin-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-link);

        @include p.interactive-states('--dt-color-transparent', 'transparent', '01');
    }

    &.o-btn--inverse {
        --int-states-mixin-bg-color: var(--dt-color-interactive-inverse);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        @include p.interactive-states('--dt-color-interactive-inverse');
    }

    &.o-btn--ghost-inverse,
    &.o-btn--outline-inverse {
        --int-states-mixin-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-primary);

        @include p.interactive-states('--dt-color-transparent', 'transparent-inverse', '02');
    }

    &.o-btn--outline-inverse {
        border: 1px solid var(--dt-color-border-strong);
    }

    &.o-btn--destructive {
        --int-states-mixin-bg-color: var(--dt-color-support-error);

        @include p.interactive-states('--dt-color-support-error');
    }

    &.o-btn--destructive-ghost {
        --int-states-mixin-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-error);

        @include p.interactive-states('--dt-color-transparent', 'transparent', '01');
    }

    // *********************
    // Button Size Modifiers
    // *********************
    &.o-btn--xsmall {
        @include button-size(xsmall);
        @include button-padding(xsmall);

        @include responsive-wide {
            // productive is the default size when responsive is enabled
            @include button-size(small-productive);
            @include button-padding(small-productive);

            &.o-btn--expressive {
                @include button-size(small-expressive);
                @include button-padding(small-expressive);
            }
        }

        &.o-btn--outline,
        &.o-btn--outline-inverse {
            @include button-padding(xsmall, true);

            @include responsive-wide {
                @include button-padding(small-productive, true);

                &.o-btn--expressive {
                    @include button-padding(small-expressive, true);
                }
            }
        }
    }

    &.o-btn--small-expressive {
        @include button-size(small-expressive);
        @include button-padding(small-expressive);

        @include responsive-wide {
            @include button-size(medium);
            @include button-padding(medium);
        }

        &.o-btn--outline,
        &.o-btn--outline-inverse {
            @include button-padding(small-expressive, true);

            @include responsive-wide {
                @include button-padding(medium, true);
            }
        }
    }

    &.o-btn--small-productive {
        @include button-size(small-productive);
        @include button-padding(small-productive);

        @include responsive-wide {
            @include button-size(medium);
            @include button-padding(medium);
        }

        &.o-btn--outline,
        &.o-btn--outline-inverse {
            @include button-padding(small-productive, true);

            @include responsive-wide {
                @include button-padding(medium, true);
            }
        }
    }

    &.o-btn--medium {
        @include button-size(medium);
        @include button-padding(medium);

        @include responsive-wide {
            @include button-size(large);
            @include button-padding(large);
        }

        &.o-btn--outline,
        &.o-btn--outline-inverse {
            @include button-padding(medium, true);

            @include responsive-wide {
                @include button-padding(large, true);
            }
        }
    }

    &.o-btn--large {
        @include button-size(large);
        @include button-padding(large);

        &.o-btn--outline,
        &.o-btn--outline-inverse {
            @include button-padding(large, true);
        }
    }

    // ******************************
    // Additional component modifiers
    // ******************************
    &.o-btn--fullWidth {
        --btn-inline-size: 100%;
    }

    // **************
    // Disabled state
    // **************
    &[disabled] {
        --btn-text-color: var(--dt-color-content-disabled) !important;

        cursor: not-allowed;

        // For every variant (except ghost variants) set the disabled background color
        &:not(.o-btn--ghost, .o-btn--ghost-inverse, .o-btn--destructive-ghost) {
            --int-states-mixin-bg-color: var(--dt-color-disabled-01) !important;
        }

        // For outline variants, set the border to the disabled color
        &.o-btn--outline,
        &.o-btn--outline-inverse {
            border-color: var(--dt-color-disabled-01) !important;
        }
    }

    // *************
    // Loading state
    // *************
    &.is-loading {
        & > *:not(pie-spinner) {
            visibility: hidden;
        }

        pie-spinner {
            position: absolute;
        }
    }

    // ************
    // Focus styles
    // ************
    &:focus-visible {
        @include p.focus;
    }
}

// The inner span for the button text is needed to handle the text-overflow
// Without this, single word overflow wouldn't be possible in combination
// with display: flex.
.o-btn-text {
    text-overflow: ellipsis;
    overflow: hidden;
}

// Used to size an SVG if one is passed in (when not using the component icons)
::slotted(svg) {
    height: var(--icon-size-override);
    width: var(--icon-size-override);
}
