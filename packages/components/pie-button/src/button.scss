// Defines button interactive states for hover and active using HSL & calc
// Takes a color token name as an argument
@mixin button-interactive-states($bg-color) {
    &:hover:not(:disabled) {
        background-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) - var(--dt-color-hover-01)));
    }

    &:active:not(:disabled) {
        background-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) - var(--dt-color-active-01)));
    }
}

// Spin animation for loading state
@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(359deg);
    }
}

// Base button styles
.o-btn {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    --btn-border-radius: var(--dt-radius-rounded-e);
    --btn-font-family: var(--dt-font-interactive-m-family);
    --btn-font-weight: var(--dt-font-interactive-m-weight);

    // The base values are set to the size default, which is for the medium button size
    --btn-padding: 10px var(--dt-spacing-e);
    --btn-min-block-size: 48px;
    --btn-min-inline-size: 97px;
    --btn-font-size: calc(var(--dt-font-size-20) * 1px);
    --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);

    // The following values set to default background and color
    // currently this sets the primary button styles
    --btn-bg-color: var(--dt-color-interactive-brand);
    --btn-text-color: var(--dt-color-content-interactive-primary);

    // Spinner default colors
    // current set for the primary button styles
    --spinner-base-color-h: var(--dt-color-content-interactive-primary-h);
    --spinner-base-color-s: var(--dt-color-content-interactive-primary-s);
    --spinner-base-color-l: var(--dt-color-content-interactive-primary-l);

    --spinner-left-color-opacity: 0.35;
    --spinner-left-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), var(--spinner-left-color-opacity));
    --spinner-right-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), 1);

    display: flex;
    align-items: center;
    justify-content: center;

    min-block-size: var(--btn-min-block-size);
    min-inline-size: var(--btn-min-inline-size);
    padding: var(--btn-padding);
    border: none;
    border-radius: var(--btn-border-radius);
    outline: none;
    background-color: var(--btn-bg-color);
    font-family: var(--btn-font-family);
    font-size: var(--btn-font-size);
    font-weight: var(--btn-font-weight);
    color: var(--btn-text-color);
    line-height: var(--btn-line-height);
    cursor: pointer;
    user-select: none;

    &:focus-visible {
        /*
        TODO: This focus styling should be extracted out into a shared mixin to share among other components
        Applying both shadows in a single declaration gives anti-aliasing artefacts.
        box-shadow: 0 0 0 2px dt.$color-focus-inner, 0 0 0 4px dt.$color-focus-outer;

        To prevent this, they should be separated so they don't bleed into each other,
        i.e., one shadow on the element and another on a pseudo element like :after
        */
        box-shadow: 0 0 0 2px var(--dt-color-focus-inner);
        outline: none;

        /*
        Setting the position to relative prevents the pseudo-element from
        anchoring instead to the nearest ancestor with a specified position.

        You can override this if you need another value.
        */
        position: relative;

        &:after {
            content: '';
            display: block;

            /*
            The pseudo element has to be larger than the element itself, but not just by
            2px (the thickness of the inner shadow), it has to be 1px larger than that to
            account for the border thickness.
            */
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            border-radius: var(--btn-border-radius);

            box-shadow: 0 0 0 2px var(--dt-color-focus-outer);
        }
    }

    // Variant
    &[variant='primary'] {
        @include button-interactive-states('--dt-color-interactive-brand');

        &[size='xsmall'],
        &[size='small-productive'] {
            /**
            * Where the font-size is smaller,
            * update the button backgrounds so that the text is accessible
            **/
            --btn-bg-color: var(--dt-color-interactive-primary);

            @include button-interactive-states('--dt-color-interactive-primary');
        }
    }

    &[variant='secondary'] {
        --btn-bg-color: var(--dt-color-interactive-secondary);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        --spinner-base-color-h: var(--dt-color-content-interactive-secondary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-secondary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-secondary-l);

        @include button-interactive-states('--dt-color-interactive-secondary');
    }

    &[variant='outline'] {
        --btn-bg-color: var(--dt-color-container-default);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        --spinner-base-color-h: var(--dt-color-content-interactive-secondary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-secondary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-secondary-l);

        border: 1px solid var(--dt-color-border-strong);

        @include button-interactive-states('--dt-color-container-default');
    }

    &[variant='ghost'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-link);

        --spinner-base-color-h: var(--dt-color-content-interactive-secondary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-secondary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-secondary-l);

        @include button-interactive-states('--dt-color-container-default');
    }

    &[variant='inverse'] {
        --btn-bg-color: var(--dt-color-interactive-inverse);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        --spinner-base-color-h: var(--dt-color-content-interactive-secondary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-secondary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-secondary-l);

        @include button-interactive-states('--dt-color-interactive-inverse');
    }

    &[variant='ghost-inverse'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-primary);

        --spinner-base-color-h: var(--dt-color-content-interactive-primary-h);
        --spinner-base-color-s: var(--dt-color-content-interactive-primary-s);
        --spinner-base-color-l: var(--dt-color-content-interactive-primary-l);

        @include button-interactive-states('--dt-color-container-inverse');
    }

    // Additional modifiers
    &[isFullWidth] {
        inline-size: 100%;
    }

    &[disabled] {
        --btn-text-color: var(--dt-color-content-disabled) !important;

        cursor: not-allowed;

        // For every variant except ghost and ghost-inverse, set the disabled background color
        &:not([variant='ghost'], [variant='ghost-inverse']) {
            --btn-bg-color: var(--dt-color-disabled-01) !important;
        }

        // For outline variants, set the border to the disabled color
        &[variant='outline'] {
            border-color: var(--dt-color-disabled-01) !important;
        }
    }

    &[loading] icon-loading {
        animation: spin 1s linear infinite;
    }

    &[size='xsmall'] {
        --btn-padding: 6px var(--dt-spacing-b);
        --btn-font-size: calc(var(--dt-font-size-14) * 1px);
        --btn-line-height: calc(var(--dt-font-size-14-line-height) * 1px);
        --btn-min-inline-size: 50px;
        --btn-min-block-size: 32px;
    }

    &[size='small-expressive'] {
        --btn-padding: 6px var(--dt-spacing-d);
        --btn-font-size: calc(var(--dt-font-size-20) * 1px);
        --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
        --btn-min-inline-size: 81px;
        --btn-min-block-size: 40px;
    }

    &[size='small-productive'] {
        --btn-padding: 8px var(--dt-spacing-d);
        --btn-font-size: calc(var(--dt-font-size-16) * 1px);
        --btn-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
        --btn-min-inline-size: 71px;
        --btn-min-block-size: 40px;
    }

    &[size='medium'] {
        /* Same as default styles */
    }

    &[size='large'] {
        --btn-padding: 14px var(--dt-spacing-e);
        --btn-font-size: calc(var(--dt-font-size-20) * 1px);
        --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
        --btn-min-inline-size: 97px;
        --btn-min-block-size: 56px;
    }
}

.o-btn-spinner {
    height: 24px;
    width: 24px;
    background-color: transparent;
    border-radius: 50%;
    border-top-color: var(--spinner-left-color);
    border-left-color: var(--spinner-left-color);
    border-right-color: var(--spinner-right-color);
    border-bottom-color: var(--spinner-right-color);
    border-width: 4px;
    border-style: solid;
    // rotate the span so the borders that connect are vertical
    transform: rotate(135deg);
}
