@use '@justeattakeaway/pie-css/scss' as p;

*,
*:before,
*:after {
    box-sizing: border-box;
}

/**
* Defines button interactive states for hover, active and loading.
* $bg-color: design token name to be used for the states
* $mode: 'default': apply the default lighten/darken to the color via hsl
*        'transparent': uses hsla syntax to make the color semi-opaque (used for ghost and outline button variants)
*/
@mixin button-interactive-states($bg-color, $mode: 'default') {
    &:hover:not(:disabled) {
        @if $mode == 'alt' {
            --hover-modifier: calc(-1 * var(--dt-color-hover-02));
        } @else {
            --hover-modifier: calc(-1 * var(--dt-color-hover-01));
        }

        // for mode=transparent, use the hsla syntax to make the button background opaque by a set percentage
        @if $mode == 'transparent' {
            --hover-modifier: var(--dt-color-hover-01);
            --btn-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), var(#{$bg-color}-l), var(--hover-modifier));
        } @else {
            --btn-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) + var(--hover-modifier)));
        }
    }

    &:active:not(:disabled),
    &[isLoading]:not(:disabled) {
        @if $mode == 'alt' {
            --active-modifier: calc(-1 * var(--dt-color-active-02));
        } @else {
            --active-modifier: calc(-1 * var(--dt-color-active-01));
        }

        @if $mode == 'transparent' {
            --active-modifier: var(--dt-color-active-01);
            --btn-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), var(#{$bg-color}-l), var(--active-modifier));
        } @else {
            --btn-bg-color: hsl(var(#{$bg-color}-h), var(#{$bg-color}-s), calc(var(#{$bg-color}-l) + var(--active-modifier)));
        }
    }
}

/**
* Shorthand mixin for updating the HSL custom properties for the loading spinner.
* Takes in the name of the color to be split into its HSL components.
*/
@mixin spinner-base-colors($color) {
    --spinner-base-color-h: var(#{$color}-h);
    --spinner-base-color-s: var(#{$color}-s);
    --spinner-base-color-l: var(#{$color}-l);
}

// Spin animation for loading state
@keyframes rotate360 {
    from {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }
}

// Base button styles
.o-btn {
    // Custom Property Declarations
    // These are defined here instead of :host to encapsulate them inside Shadow DOM
    --btn-border-radius: var(--dt-radius-rounded-e);
    --btn-font-family: var(--dt-font-interactive-m-family);
    --btn-font-weight: var(--dt-font-interactive-m-weight);

    // The base values are set to the size default, which is for the medium button size
    --btn-padding: 10px var(--dt-spacing-e);
    --btn-font-size: #{p.font-size(--dt-font-size-20)};
    --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);

    // The following values set to default background and color
    // currently this sets the primary button styles
    --btn-bg-color: var(--dt-color-interactive-brand);
    --btn-text-color: var(--dt-color-content-interactive-primary);

    // Heights for the different button sizes
    --btn-height--xsmall: 32px;
    --btn-height--small: 40px;
    --btn-height--medium: 48px;
    --btn-height--large: 56px;

    // Set height to medium (the default state)
    --btn-height: var(--btn-height--medium);

    // Set icon size to the medium button icon size (the default state)
    --btn-icon-size: 24px;

    // Spinner size defaults - currently set for the medium button size (the default state)
    --spinner-size-s: 20px;
    --spinner-size-m: 24px;
    --spinner-border-width-s: 2.5px;
    --spinner-border-width-m: 3px;
    --spinner-size: var(--spinner-size-m);
    --spinner-border-width: var(--spinner-border-width-m);

    // Spinner colors - currently set for the primary button styles
    @include spinner-base-colors(--dt-color-content-interactive-primary);

    --spinner-left-color-opacity: 0.35;
    --spinner-left-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), var(--spinner-left-color-opacity));
    --spinner-right-color: hsl(var(--spinner-base-color-h), var(--spinner-base-color-s), var(--spinner-base-color-l), 1);

    // Spinner animations
    --spinner-animation-duration: 1.15s;
    --spinner-animation-timing-function: linear;
    --spinner-animation-iteration-count: infinite;

    position: relative;
    display: flex;
    gap: var(--dt-spacing-b);
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    height: var(--btn-height);
    padding: var(--btn-padding);
    border: none;
    border-radius: var(--btn-border-radius);
    outline: none;
    background-color: var(--btn-bg-color);
    font-family: var(--btn-font-family);
    font-size: var(--btn-font-size);
    font-weight: var(--btn-font-weight);
    color: var(--btn-text-color);
    line-height: var(--btn-line-height);
    cursor: pointer;
    user-select: none;

    // used to specify whether the button should be full width or not
    inline-size: var(--btn-inline-size);

    // Variant
    &[variant='primary'] {
        @include button-interactive-states('--dt-color-interactive-brand');

        &[size='xsmall'],
        &[size='small-productive'] {
            /**
            * Where the font-size is smaller,
            * update the button backgrounds so that the text is accessible
            **/
            --btn-bg-color: var(--dt-color-interactive-primary);

            @include button-interactive-states('--dt-color-interactive-primary', 'alt');
        }
    }

    &[variant='secondary'] {
        --btn-bg-color: var(--dt-color-interactive-secondary);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        @include button-interactive-states('--dt-color-interactive-secondary');
        @include spinner-base-colors('--dt-color-content-interactive-secondary');
    }

    &[variant='outline'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        border: 1px solid var(--dt-color-border-strong);

        // use black as the background color for hover and inverse,
        // as this variant uses a shade of transparent black showing through the container background
        @include button-interactive-states('--dt-color-black', 'transparent');
        @include spinner-base-colors('--dt-color-content-interactive-secondary');
    }

    &[variant='ghost'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-link);

        // use black as the background color for hover and inverse,
        // as this variant uses a shade of transparent black showing through the container background
        @include button-interactive-states('--dt-color-black', 'transparent');
        @include spinner-base-colors('--dt-color-content-interactive-secondary');
    }

    &[variant='inverse'] {
        --btn-bg-color: var(--dt-color-interactive-inverse);
        --btn-text-color: var(--dt-color-content-interactive-secondary);

        @include button-interactive-states('--dt-color-interactive-inverse');
        @include spinner-base-colors('--dt-color-content-interactive-secondary');
    }

    &[variant='ghost-inverse'],
    &[variant='outline-inverse'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-primary);

        // use white as the background color for hover and inverse,
        // as these variants use a shade of transparent white showing through the container background
        @include button-interactive-states('--dt-color-container-default', 'transparent');
    }

    &[variant='outline-inverse'] {
        border: 1px solid var(--dt-color-border-strong);
    }

    &[variant='destructive'] {
        --btn-bg-color: var(--dt-color-support-error);

        @include button-interactive-states('--dt-color-support-error');
    }

    &[variant='destructive-ghost'] {
        --btn-bg-color: transparent;
        --btn-text-color: var(--dt-color-content-interactive-error);

        // use black as the background color for hover and inverse,
        // as this variant uses a shade of transparent black showing through the container background
        @include button-interactive-states('--dt-color-black', 'transparent');
        @include spinner-base-colors('--dt-color-content-interactive-secondary');
    }

    // Additional modifiers
    &[isFullWidth] {
        --btn-inline-size: 100%;
    }

    &[disabled] {
        --btn-text-color: var(--dt-color-content-disabled) !important;

        cursor: not-allowed;

        // For every variant (except ghost variants) set the disabled background color
        &:not([variant='ghost'], [variant='ghost-inverse'], [variant='destructive-ghost']) {
            --btn-bg-color: var(--dt-color-disabled-01) !important;
        }

        // For outline variants, set the border to the disabled color
        &[variant='outline'] {
            border-color: var(--dt-color-disabled-01) !important;
        }
    }

    &[size='xsmall'] {
        --btn-height: var(--btn-height--xsmall);
        --btn-padding: 6px var(--dt-spacing-b);
        --btn-font-size: #{p.font-size(--dt-font-size-14)};
        --btn-line-height: calc(var(--dt-font-size-14-line-height) * 1px);
        --btn-icon-size: 16px;
        --spinner-size: var(--spinner-size-s);
        --spinner-border-width: var(--spinner-border-width-s);
    }

    &[size='small-expressive'],
    &[size='small-productive'] {
        --btn-height: var(--btn-height--small);
        --btn-icon-size: 20px;
        --spinner-size: var(--spinner-size-s);
        --spinner-border-width: var(--spinner-border-width-s);
    }

    &[size='small-expressive'] {
        --btn-padding: 6px var(--dt-spacing-d);
        --btn-font-size: #{p.font-size(--dt-font-size-20)};
        --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
    }

    &[size='small-productive'] {
        --btn-padding: 8px var(--dt-spacing-d);
        --btn-font-size: #{p.font-size(--dt-font-size-16)};
        --btn-line-height: calc(var(--dt-font-size-16-line-height) * 1px);
    }

    &[size='medium'] {
        /* Same as default styles */
    }

    &[size='large'] {
        --btn-height: var(--btn-height--large);
        --btn-padding: 14px var(--dt-spacing-e);
        --btn-font-size: #{p.font-size(--dt-font-size-20)};
        --btn-line-height: calc(var(--dt-font-size-20-line-height) * 1px);
        --spinner-size: var(--spinner-size-m);
        --spinner-border-width: var(--spinner-border-width-m);
    }

    &[isLoading] {
        &:before {
            content: '';

            // Centre the spinner over the top of the button text
            position: absolute;
            left: 50%;
            top: 50%;
            translate: -50% -50%;

            height: var(--spinner-size);
            width: var(--spinner-size);
            display: block;
            background-color: transparent;
            border-radius: 50%;
            border-color: var(--spinner-left-color) var(--spinner-right-color) var(--spinner-right-color) var(--spinner-left-color);
            border-width: var(--spinner-border-width);
            border-style: solid;
            will-change: transform;
            animation: rotate360 var(--spinner-animation-duration) var(--spinner-animation-timing-function) var(--spinner-animation-iteration-count);
        }

        & > * {
            visibility: hidden;
        }
    }

    &:focus-visible {
        @include p.focus;
    }
}

// Used to size an SVG if one is passed in (when not using the component icons)
::slotted(svg) {
    height: var(--btn-icon-size);
    width: var(--btn-icon-size);
}
