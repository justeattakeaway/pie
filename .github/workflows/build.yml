name: Build

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened, "ready_for_review"]
    paths-ignore:
      - ".husky/**"
      - ".idea/**"
      - "stories/**"
      - ".vscode/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "CHANGELOG.md"
      - "LICENSE"
  push:
    branches:
      - main
      - beta-*
      - feature-*

concurrency: CI-${{ github.ref }}

jobs:
  dependency-changeset:
    if: github.actor == 'renovate-bot' || github.actor == 'renovate[bot]'
    uses: the-guild-org/shared-config/.github/workflows/changesets-dependencies.yaml@main
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  install:
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        # Setup Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules if cache exists. If not, cache is created at end of build.
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn add --cached

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup Node 16
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Restore Turborepo's 'dist' cache - If not, cache is created at end of build.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.sha }}
          # Use one of the following keys if the above is not found.
          restore-keys: |
            turborepo-dist-cache-${{ github.ref_name }}
      # Lint Styles
      - name: Lint Styles
        run: yarn lint:style --concurrency=10 --cache-dir=".turbo"
      # Build Packages
      - name: Build Packages
        run: yarn build --cache-dir=".turbo"
        env:
          PIE_URL_PREFIX: /pr-preview-docs/pr-${{github.event.number}}/
      # Lint JS
      - name: Lint JavaScript
        run: yarn lint:scripts --cache-dir=".turbo"
      # Run Unit Tests
      - name: Unit Tests
        run: yarn test:ci --cache-dir=".turbo"

  deploy-docs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup Node 16
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Restore Turborepo's 'dist' cache - If not, cache is created at end of build.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.sha }}
          # Use one of the following keys if the above is not found.
          restore-keys: |
            turborepo-dist-cache-${{ github.ref_name }}
            turborepo-dist-cache-
      # Build Projects
      - name: Build Apps
        run: yarn build --filter=pie-docs --cache-dir=".turbo"
      # Deployments
      - name: Deploy - Docs PR Preview
        id: preview-docs
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./apps/pie-docs/dist
          preview-branch: gh-pages
          umbrella-dir: pr-preview-docs
          action: auto
      - name: Deploy - Master
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./apps/pie-docs/dist
          force: false
          target-folder: .
          branch: gh-pages
          clean-exclude: |
            ./pr-preview-docs
            ./pr-preview-storybook
            ./storybook

  deploy-storybook:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup Node 16
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Restore Turborepo's 'dist' cache - If not, cache is created at end of build.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.sha }}
          # Use one of the following keys if the above is not found.
          restore-keys: |
            turborepo-dist-cache-${{ github.ref_name }}
            turborepo-dist-cache-
      # Build Projects
      - name: Build Apps
        run: yarn build --filter=pie-storybook --cache-dir=".turbo"
      # Deployments
      - name: Deploy - Storybook PR Preview
        id: preview-storybook
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./apps/pie-storybook/dist
          preview-branch: gh-pages
          umbrella-dir: pr-preview-storybook
          action: auto
      - name: Deploy - Master
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./apps/pie-storybook/dist
          force: false
          branch: gh-pages
          target-folder: ./storybook
          clean-exclude: |
            pr-preview-docs
            pr-preview-storybook

  browser-tests:
    needs: deploy-docs
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Setup Node 16
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules - Cache should exist as one was created in previous 'install' job
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=`node -p "require('./package.json')['devDependencies']['@playwright/test']"`" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npx playwright install-deps
      # Run System / a11y Tests
      - name: Run System / a11y Tests - Changed Packages + Dependants
        if: ${{ !contains(github.ref_name, 'main') }}
        run: |
          yarn test:system:ci --filter=...[origin/main] && 
          yarn test:a11y:ci --filter=...[origin/main]
      - name: Run All System / a11y Tests
        if: contains(github.ref_name, 'main')
        run: |
          yarn test:system:ci &&
          yarn test:a11y:ci
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 3
      - name: Upload a11y Report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: pie-docs-violations
          path: apps/pie-docs/test/accessibility/violations
      # Run Visual Tests
      - name: Run Visual Tests - Changed Packages + Dependants
        if: ${{ github.event.pull_request.draft == false && !contains(github.ref_name, 'main') }}
        run: |
          yarn test:visual:ci --filter=...[origin/main]
      - name: Run All Visual Tests
        if: contains(github.ref_name, 'main')
        run: |
          yarn test:visual:ci
    env:
      PIE_URL_PREFIX: pr-preview-docs/pr-${{github.event.number}}/
      PERCY_TOKEN_PIE_DOCS: ${{ secrets.PERCY_TOKEN_PIE_DOCS }}

  release:
    needs: build
    if: github.repository == 'justeattakeaway/pie' &&
      ${{ github.event_name != 'pull_request' }} &&
      (contains(github.ref_name, 'main') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'feature'))
    name: release
    runs-on: ubuntu-latest
    steps:
      # Checkout the Repo
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node
        # Setup Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      # Restore node_modules if cache exists. If not, cache is created at end of build.
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: node-modules-${{ hashFiles('**/yarn.lock') }}
      # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible
      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn add --cached
      - name: Append NPM token to .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
      # Restore Turborepo's 'dist' cache - If not, cache is created at end of build.
      - name: Cache Turborepo Dist
        id: turborepo-dist-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.sha }}
          # Use one of the following keys if the above is not found.
          restore-keys: |
            turborepo-dist-cache-${{ github.ref_name }}
            turborepo-dist-cache-
      # Build Packages
      - name: Build Docs
        if: ${{ github.event_name != 'pull_request' }} &&
          (contains(github.ref_name, 'main') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'feature'))
        run: yarn build --cache-dir=".turbo"
      - name: Check for pre.json file existence
        id: check_files
        uses: andstor/file-existence-action@v2.0.0
        with:
          files: ".changeset/pre.json"
      - name: exit prerelease mode
        # If .changeset/pre.json does not exist and we did not recently exit
        # prerelease mode.
        if: steps.check_files.outputs.files_exists == 'true' && contains(github.ref_name, 'main')
        run: npx changeset pre exit
      - name: Create latest release PR
        if: contains(github.ref_name, 'main')
        uses: changesets/action@v1
        with:
          version: yarn changeset:version
          publish: yarn changeset:publish
          commit: "release: release packages with 'latest' tag"
      # If .changeset/pre.json does not exist and we did not recently exit
      # prerelease mode, enter prerelease mode with tag beta
      - name: Enter beta prerelease mode
        if: steps.check_files.outputs.files_exists == 'false' && contains(github.ref_name, 'beta')
        # If .changeset/pre.json does not exist and we did not recently exit
        # prerelease mode, enter prerelease mode with tag beta
        run: npx changeset pre enter beta
      - name: Create beta release PR
        if: contains(github.ref_name, 'beta')
        uses: changesets/action@v1
        with:
          version: yarn changeset:version
          publish: yarn changeset:publish
          commit: "release: release packages with 'beta' tag"
      - name: Enter feature prerelease mode
        if: steps.check_files.outputs.files_exists == 'false' && contains(github.ref_name, 'feature')
        # If .changeset/pre.json does not exist and we did not recently exit
        # prerelease mode, enter prerelease mode with tag next
        run: npx changeset pre enter next
      - name: Create feature release PR
        if: contains(github.ref_name, 'feature')
        uses: changesets/action@v1
        with:
          version: yarn changeset:version
          publish: yarn changeset:publish
          commit: "release: release packages with 'next' tag"
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      HUSKY: 0
