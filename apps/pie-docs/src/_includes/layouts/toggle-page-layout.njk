---
layout: layouts/page-layout.njk
contentAKey: toggle-content-a
contentBKey: toggle-content-b
togglePage: true
bodyDataAttribute: data-toggle-page
---
{% set isToggleASelected = selectedToggle == togglePageOptions.A %}

<h2>{{ subtitle }}</h2>
<p>{{ subtitleDescription }}</p>

<div class="c-toggle u-spacing-e--top">
    <div
        id="toggle-option-a-wrapper"
        data-test-id="toggle-option-a"
        class="c-toggle-item {% if isToggleASelected %}is-active{% endif %}">
        <input
            id="toggle-option-a"
            class="c-toggle-input"
            type="radio"
            {% if isToggleASelected %} checked {% endif %}/>
        <label
            class="c-toggle-label"
            for="toggle-option-a">
            {{ toggleContent.a.label }}
        </label>
    </div>
    <div
        id="toggle-option-b-wrapper"
        data-test-id="toggle-option-b"
        class="c-toggle-item {% if not isToggleASelected %}is-active{% endif %}">
        <input
            id="toggle-option-b"
            class="c-toggle-input"
            type="radio"
            {% if not isToggleASelected %} checked {% endif %} />
        <label
            class="c-toggle-label"
            for="toggle-option-b">
            {{ toggleContent.b.label }}
        </label>
    </div>
</div>
<hr/>

{#
    How to use:
    ===========

    The toggle page is designed to allow users to toggle between two variations of content:
    Content A and Content B.

    ---

    We want 11ty to:

    On Page A, show Content A and hide Content B
    On Page B, show Content B and hide Content A

    ---

    Because 11ty renders the pages as pre-built HTML pages,
    Content A and Content B will need to be pre-marked as either 'shown' or 'hidden'.

    An example of this is the alias tokens pages in foundations/colour where we have light and dark tokens.

    Content A (the left side of the toggle control) displays the light theme alias tokens.
    Content B (the right side of the toggle control) displays the dark theme alias tokens.

    Content A and B are defined as 'light' and 'dark' in the foundations/colour/tokens/alias/alias.json data file
    (and will need to be declared accordingly in any other toggle page folders).

    ---

    We always want the IDs used to remain the same magic string values irrespective of the tab content (whether Content A and B are light and dark, wide and narrow etc).
    So we define them in this layout as frontmatter, referencing them in the local data files when deciding which ID to show and hide
    per page. For example on 'Page b': shownContentKey: "{{contentBKey}}" and 'Page a': shownContentKey: "{{contentAKey}}".
#}

<div
    id="{{shownContentKey}}"
    data-slug="{{shownContentSlug}}">
    {{ shownContent | markdown | safe }}
</div>

<div
    id="{{hiddenContentKey}}"
    data-slug="{{hiddenContentSlug}}"
    class="is-hidden">
    {{ hiddenContent | markdown | safe }}
</div>
